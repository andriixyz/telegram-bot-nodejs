"use strict";
let private_ = require('../private.json');
const ADMIN_ID = private_['ADMIN_ID'];
const MY_SHEDULE =private_['MY_SHEDULE'];
const BOT_TOKEN = private_['BOT_TOKEN'];

var TelegramBot = require("node-telegram-bot-api");
var bot = new TelegramBot(BOT_TOKEN, { polling: true });
const validUrl = require("valid-url");
const browser = require("./../browser/browser");
const sizeOf = require("buffer-image-size");
const countriesTimeZone = require("countries-and-timezones");

const botProcedureController = require("./BotProcedureController");
const BotProcControll = new botProcedureController.BotProcedureController();

const botDialogController = require("./BotDialogController");
const BotDialogControll = new botDialogController.BotDialogController();

const FREQUENCY_REMIND_CHECK = 10000;
const botReminderController = require("./BotReminderController");
const BotReminderControll = new botReminderController.BotReminderController();
BotReminderControll.setFrequencyCheck(FREQUENCY_REMIND_CHECK);
BotReminderControll.start();

BotReminderControll.setOnTrigger = () => {
  var parameters = BotReminderControll.getParameters();
  bot.sendMessage(
    parameters.id_user,
    "–¢—ã –ø—Ä–æ—Å–∏–ª –º–µ–Ω—è –Ω–∞–ø–æ–º–Ω–∏—Ç—å: " + parameters.text
  );
};

var sheduleTimer;
const FREQUENCY_SCHEDULE_CHECK = 600000;
var currentSchedule;
var previousSchedule = "a";
var firstLaunch = true;

process.env.NTBA_FIX_319 = 1;

///////// After restart or first launch////////
bot.sendMessage(ADMIN_ID, "–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞...");

/////////////////////////////////////////////////////////////////////////

BotProcControll.addProcedure("/start");

BotProcControll.getProcedure("/start").addStage("hello", () => {
  var parameters = BotProcControll.getProcedure("/start").parameters;
  bot.sendMessage(
    parameters["msg"].chat.id,
    "–ü—Ä–∏–≤–µ—Ç! –Ø Kowalski Bot. –¢—ã –º–æ–∂–µ—à—å –º–Ω–µ —Å–∫–∞–∑–∞—Ç—å —á—Ç–æ —Ç–µ–±–µ –Ω—É–∂–Ω–æ –Ω–∞–ø–æ–º–Ω–∏—Ç—å. –¢–∞–∫ –∂–µ —è –º–æ–≥—É " +
      "–º–æ–≥—É –Ω–∞–ø–æ–º–Ω–∏—Ç—å –∫–æ–º—É-—Ç–æ —Ç–æ, —á—Ç–æ —Ç—ã –ø–æ–ø—Ä–æ—Å–∏—à—å –º–µ–Ω—è. –ï—â—ë, —Ç—ã –º–æ–∂–µ—à—å –ø–æ–ø—Ä–æ—Å–∏—Ç—å –º–µ–Ω—è —Å–¥–µ–ª–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç."
  );
  BotDialogControll.getNode(parameters["msg"].chat.id).changeState("ask");
});
BotProcControll.getProcedure("/start").addStage("ask", () => {
  var parameters = BotProcControll.getProcedure("/start").parameters;
  bot.sendMessage(
    parameters["msg"].chat.id,
    "–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã —è —Å–º–æ–≥ —Ç–µ–±–µ –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å, –º–Ω–µ –Ω—É–∂–Ω–æ —É–∑–Ω–∞—Ç—å —Ç–≤–æ–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å." +
      "–¢–µ–±–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –Ω–∞–ø–∏—Å–∞—Ç—å –∫–æ–¥ —Å—Ç—Ä–∞–Ω—ã."
  );
  BotDialogControll.getNode(parameters["msg"].chat.id).changeState("check");
});

BotProcControll.getProcedure("/start").addStage("check", () => {
  var parameters = BotProcControll.getProcedure("/start").parameters;

  const TIME_ZONES = countriesTimeZone.getTimezonesForCountry(
    parameters["msg"].text
  );

  if (TIME_ZONES.length == 0) {
    bot.sendMessage(parameters["msg"].chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å—Ç—Ä–∞–Ω—É!");
  } else {
    var cities = [];
    TIME_ZONES.forEach(function(element) {
      cities.push({
        text: element.name.slice(
          element.name.indexOf("/") + 1,
          element.name.length
        ),
        callback_data: element.name + "/" + parameters["msg"].text
      });
    });
    bot.sendMessage(
      parameters["msg"].chat.id,
      "–í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ —Ç—ã –∂–∏–≤–µ—à—å? –ï—Å–ª–∏ –Ω–µ—Ç —Ç–≤–æ–µ–≥–æ –≥–æ—Ä–æ–¥–∞, —É–∫–∞–∂–∏ —Å—Ç–æ–ª–∏—Ü—É —Å–≤–æ–µ–π —Å—Ç—Ä–∞–Ω—ã." +
        "–¢–æ–≥–¥–∞ —è –±—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å —Ç–µ–±–µ –ø–æ —Ç–≤–æ–µ–º—É —Å—Ç–æ–ª–∏—á–Ω–æ–º—É –≤—Ä–µ–º–µ–Ω–∏",
      {
        reply_markup: {
          inline_keyboard: [cities]
        }
      }
    );
    BotDialogControll.getNode(parameters["msg"].chat.id).changeState(
      "set city"
    );
  }
});
BotProcControll.getProcedure("/start").addStage("set city", () => {
  var parameters = BotProcControll.getProcedure("/start").parameters;
  const DATA = parameters["msg"].data;
  var countryIndex = DATA.lastIndexOf("/");
  var country = DATA.slice(countryIndex + 1, DATA.length);
  var city = DATA.slice(0, countryIndex);
  const TIME_ZONES = countriesTimeZone.getTimezonesForCountry(country);

  var timeUTC;
  TIME_ZONES.forEach(function(element) {
    if (element.name == city) {
      timeUTC = element.offsetStr;
    }
  });
  BotReminderControll.addUser(
    parameters["msg"].message.chat.id,
    parameters["msg"].message.chat.username,
    parameters["msg"].message.chat.last_name,
    timeUTC
  );
  bot.sendMessage(
    parameters["msg"].message.chat.id,
    "–•–æ—Ä–æ—à–æ, —Ç—ã –∂–∏–≤–µ—à—å –≤ –≥–æ—Ä–æ–¥–µ " +
      city +
      ", –≤ —Å—Ç—Ä–∞–Ω–µ " +
      country +
      " –∏ —É —Ç–µ–±—è —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å - " +
      timeUTC +
      ". –ö–æ–º–∞–Ω–¥–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è - /remindme"
  );
  BotDialogControll.getNode(parameters["msg"].message.chat.id).resetNode();
});

/////////////////////////////////////////////////////////////////////////

BotProcControll.addProcedure("/remindme");

BotProcControll.getProcedure("/remindme").addStage("ask", () => {
  var parameters = BotProcControll.getProcedure("/remindme").parameters;

  BotReminderControll.checkUserExist(parameters["msg"].chat.id).then(result => {
    if (result) {
      bot.sendMessage(
        parameters["msg"].chat.id,
        "–¢–µ–±–µ —á—Ç–æ —Ç–æ –Ω–∞–ø–æ–º–Ω–∏—Ç—å? –û—Ç–ª–∏—á–Ω–æ, –Ω–∞–ø–∏—à–∏ –º–Ω–µ —á—Ç–æ —Ç–µ–±–µ –Ω–∞–ø–æ–º–Ω–∏—Ç—å –≤ —Ç–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ: \n" +
          "–¢–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è / 05-18 21:21\n" +
          "<strong>PS: –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π —Å–∏–º–≤–æ–ª—ã - –∏ : \n" +
          "–û–Ω–∏ –Ω—É–∂–Ω—ã –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–≤–æ–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.</strong>",
        {
          parse_mode: "HTML"
        }
      );
      BotDialogControll.getNode(parameters["msg"].chat.id).changeState("check");
    } else {
      bot.sendMessage(
        parameters["msg"].chat.id,
        "–ü–æ—Ö–æ–∂–µ, —Ç—ã –µ—â—ë –Ω–µ –≥–æ–≤–æ—Ä–∏–ª –æ—Ç–∫—É–¥–∞ —Ç—ã. –≠—Ç–æ —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–ª—è" +
          "—Ç–æ–≥–æ —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Ç–≤–æ–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å. –í–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É /start"
      );
      BotDialogControll.getNode(parameters["msg"].chat.id).resetNode();
    }
  });
});

BotProcControll.getProcedure("/remindme").addStage("check", () => {
  var parameters = BotProcControll.getProcedure("/remindme").parameters;

  var result = parameters["msg"].text.replace(/\s{2,}/g, " ");

  var indexSeparate = result.indexOf(" / ");
  var sliceText = result.slice(0, indexSeparate);
  var sliceDate = result.slice(indexSeparate + 3, result.length);
  var date = sliceDate.replace(" ", "T");
  var response;

  switch (null) {
    case date.match(/\d\d-/):
      response = "–ü–æ—Ö–æ–∂–µ, –º–µ—Å—è—Ü –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.";
      break;
    case date.match(/\d\dT/):
      response = "–ü–æ—Ö–æ–∂–µ, –¥–µ–Ω—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.";
      break;
    case date.match(/T\d\d:/):
      response = "–ü–æ—Ö–æ–∂–µ, —á–∞—Å—ã –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.";
      break;
    case date.match(/:\d\d/):
      response = "–ü–æ—Ö–æ–∂–µ, –º–∏–Ω—É—Ç—ã –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.";
      break;
  }
  if (response != undefined) {
    bot.sendMessage(parameters["msg"].chat.id, response);
    return;
  }

  //  Date.parse("2004-07-15T06:45:00");
  if (Date.parse("2019-" + date + ":00") != NaN) {
    var m = date.match(/\d\d-/)[0].replace("-", "");
    var d = date.match(/\d\dT/)[0].replace("T", "");
    var h = date
      .match(/T\d\d:/)[0]
      .replace("T", "")
      .replace(":", "");
    var mi = date.match(/:\d\d/)[0].replace(":", "");

    BotReminderControll.addRemind(
      parameters["msg"].chat.id,
      sliceText,
      m,
      d,
      h,
      mi
    );
    //   timezones[]
    bot.sendMessage(
      parameters["msg"].chat.id,
      "–•–æ—Ä–æ—à–æ, —è –Ω–∞–ø–æ–º–Ω—é —Ç–µ–±–µ –æ–± " + sliceText + " –≤ " + sliceDate
    );
    BotDialogControll.getNode(parameters["msg"].chat.id).resetNode();
  } else {
    bot.sendMessage(parameters["msg"].chat.id, "–û–π, –ø–æ—Ö–æ–∂–µ —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫!");
  }
});

/////////////////////////////////////////////////////////////////////////

BotProcControll.addProcedure("/cancel");

BotProcControll.getProcedure("/cancel").addStage("cancel", () => {
  var parameters = BotProcControll.getProcedure("/cancel").parameters;
  BotDialogControll.getNode(parameters["msg"].chat.id).resetNode();
  bot.sendMessage(parameters["msg"].chat.id, "–û–ø–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞.");
});

///////////////////////// Make shedule screenshot //////////////////////////

BotProcControll.addProcedure("/schedule");

BotProcControll.getProcedure("/schedule").addStage("ask", () => {
  var parameters = BotProcControll.getProcedure("/schedule").parameters;
  browser.getScreenShootShedule(MY_SHEDULE).then(
    result => {
      bot.sendPhoto(parameters["msg"].chat.id, result["buffer"]);
      BotDialogControll.getNode(parameters["msg"].chat.id).resetNode();
    },
    eror => {
      bot.sendMessage(
        parameters["msg"].chat.id,
        "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ–π—á–∞—Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ üòî"
      );
    }
  );
});

//////////////////////////////////////////////////////////////////////////

///////////////////////// Make shedule screenshot //////////////////////////

BotProcControll.addProcedure("/makescreenshot");

BotProcControll.getProcedure("/makescreenshot").addStage("ask", () => {
  var parameters = BotProcControll.getProcedure("/makescreenshot").parameters;
  bot.sendMessage(
    parameters["msg"].chat.id,
    "–•–æ—Ä–æ—à–æ, —Å–∫–æ–ø–∏—Ä—É–π —Å—é–¥–∞ —Å—Å—ã–ª–∫—É —Å–∞–π—Ç–∞ —Å –∫–æ—Ç–æ—Ä–æ–≥–æ —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç."
  );
  BotDialogControll.getNode(parameters["msg"].chat.id).changeState(
    "take screenshot"
  );
});
BotProcControll.getProcedure("/makescreenshot").addStage(
  "take screenshot",
  () => {
    var parameters = BotProcControll.getProcedure("/makescreenshot").parameters;
    if (validUrl.isWebUri(parameters["msg"].text)) {
      var timeout = setTimeout(() => {
        bot.sendMessage(
          parameters["msg"].chat.id,
          "–ü–æ—Ö–æ–∂–µ —Å–∞–π—Ç –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç, –∏–ª–∏ –Ω–µ –≤–æ–∑–º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —Å –Ω–µ–≥–æ —Å–∫—Ä–∏–Ω—à–æ—Ç"
        );
        BotDialogControll.getNode(parameters["msg"].chat.id).resetNode();
      }, 8000);
      browser.getScreenShoot(parameters["msg"].text).then(
        buffer => {
          var dimensions = sizeOf(buffer);
          if (dimensions.height > 1280 || dimensions.width > 1280) {
            bot.sendMessage(
              parameters["msg"].chat.id,
              "–°–∫—Ä–∏–Ω—à–æ—Ç —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π, —è —Ç–µ–±–µ –æ—Ç–ø—Ä–∞–≤–ª—é –µ–≥–æ —Ñ–∞–π–ª–æ–º"
            );
            clearTimeout(timeout);
            bot.sendDocument(parameters["msg"].chat.id, buffer);
          } else {
            clearTimeout(timeout);
            bot.sendPhoto(parameters["msg"].chat.id, buffer);
          }
          BotDialogControll.getNode(parameters["msg"].chat.id).resetNode();
        },
        eror => {
          clearTimeout(timeout);
          bot.sendMessage(
            parameters["msg"].chat.id,
            "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —è –Ω–µ –º–æ–≥—É –ø–µ—Ä–µ–π—Ç–∏ –ø–æ —ç—Ç–æ–π —Å—Å—ã–ª–∫–µüòî."
          );
        }
      );
    } else {
      clearTimeout(timeout);
      bot.sendMessage(
        parameters["msg"].chat.id,
        "–ü–æ—Ö–æ–∂–µ —Ç—ã –≤–≤–µ–ª –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É. –¢–µ–±–µ —Å–ª–µ–¥—É–µ—Ç –ø–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—ë."
      );
    }
  }
);

function chooseProcedure(message, isInline) {
  var parameters = message;
  var msg = message;
  if (isInline) {
    parameters = msg;
    msg = msg.message;
  }

  BotDialogControll.createNodeIfNotExist(msg.chat.id);
  const node = BotDialogControll.getNode(msg.chat.id);

  if (BotProcControll.checkExistProcedure(msg.text)) {
    BotDialogControll.getNode(msg.chat.id).set(
      BotProcControll.getProcedure(msg.text).stages[0].name,
      msg.text
    );
    BotProcControll.getProcedure(msg.text).execute(
      {
        msg: parameters
      },
      BotProcControll.getProcedure(msg.text).stages[0].name
    );
  } else if (node.procedure != 0) {
    BotProcControll.getProcedure(node.procedure).execute(
      {
        msg: parameters
      },
      node.getState()
    );
  } else {
    bot.sendMessage(msg.chat.id, "–Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω–∏–º–∞—é.");
  }
}

bot.on("message", (msg, match) => {
  chooseProcedure(msg, false);
});
bot.on("callback_query", callbackQuery => {
  chooseProcedure(callbackQuery, true);
});

function checkSchedule() {
  browser.getScreenShootShedule(MY_SHEDULE).then(result => {
    if (result["currentSchedule"] != previousSchedule) {
      if (!firstLaunch) {
        bot.sendMessage(
          ADMIN_ID,
          "–û–π! –ü–æ—Ö–æ–∂–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–∏–ª–æ—Å—å! –¢–µ–±–µ —Å—Ç–æ–∏—Ç –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –µ–≥–æ. /schedule"
        );
      } else {
        firstLaunch = false;
      }
    }
    previousSchedule = result["currentSchedule"];
  });
}
function stopCheckSchedule() {
  clearInterval(sheduleTimer);
}
function startCheckSchedule() {
  sheduleTimer = setInterval(checkSchedule, FREQUENCY_SCHEDULE_CHECK);
}

startCheckSchedule();
module.exports = {
  bot: bot
};
